name: Builder

on:
  push:
    branches: "*"
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/builder.yml"
    tags:
      - 'v[0-9]+.*'
  pull_request:
    branches: "*"
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/builder.yml"
  workflow_dispatch:

env:
  PRODUCT: Beacon
  CGO_ENABLED: 0
  GO111MODULE: on

jobs:
  build:
    name: ${{ matrix.job.GOOS }}-${{ matrix.job.GOARCH }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { GOOS: "windows", GOARCH: "amd64", os: "windows-latest" }
          - { GOOS: "windows", GOARCH: "386", os: "windows-latest" }
          - { GOOS: "windows", GOARCH: "arm64", os: "windows-latest" }
          - { GOOS: "darwin", GOARCH: "amd64", os: "macos-latest" }
          - { GOOS: "darwin", GOARCH: "arm64", os: "macos-latest" }
          - { GOOS: "linux", GOARCH: "amd64", os: "ubuntu-latest" }
          - { GOOS: "linux", GOARCH: "386", os: "ubuntu-latest" }
          - { GOOS: "linux", GOARCH: "arm64", os: "ubuntu-latest" }
        exclude:
          - job: { GOOS: "darwin", GOARCH: "386", os: "macos-latest" }
    continue-on-error: true
    env:
      GOOS: ${{ matrix.job.GOOS }}
      GOARCH: ${{ matrix.job.GOARCH }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Check out code base
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check out code base
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache go module
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install pnpm and dependencies
        run: |
          npm install -g pnpm
          cd server/frontend
          pnpm install

      - name: Pnpm Build
        run: |
          cd server/frontend
          pnpm build

      - name: Build binary
        id: builder
        shell: bash
        run: |
          ARGS="${GOOS}-${GOARCH}"
          go build -trimpath --ldflags "-s -w -buildid=" -v -o ./bin/${{ env.PRODUCT }}-${ARGS}
          # echo "::set-output name=filename::${{ env.PRODUCT }}-${ARGS}"
          echo "::set-output name=BIN_PATH::./bin/${{ env.PRODUCT }}-${ARGS}"

      - name: Check for release
        id: is-release
        shell: bash
        run: |
          unset IS_RELEASE ; if [[ $GITHUB_REF =~ ^refs/tags/v[0-9].* ]]; then IS_RELEASE='true' ; fi
          echo ::set-output name=IS_RELEASE::${IS_RELEASE}

      - name: Extract version from tag
        if: steps.is-release.outputs.IS_RELEASE
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create tarball
        if: steps.is-release.outputs.IS_RELEASE
        id: package
        shell: bash
        run: |
          PKG_suffix=".tar.gz" ; case ${{ matrix.job.GOOS }} in *windows*) PKG_suffix=".zip" ;; esac;
          TARGET="${{ matrix.job.GOOS }}-${{ matrix.job.GOARCH }}"
          PKG_BASENAME=${{ env.PRODUCT }}-v${{ env.VERSION }}-${TARGET}
          PKG_NAME=${PKG_BASENAME}${PKG_suffix}
          echo ::set-output name=PKG_NAME::${PKG_NAME}
          PKG_STAGING="./package"
          ARCHIVE_DIR="${PKG_STAGING}/${PKG_BASENAME}/"
          mkdir -p "${ARCHIVE_DIR}"
          # Binary
          cp "${{ steps.builder.outputs.BIN_PATH }}" "$ARCHIVE_DIR"
          # README, LICENSE and CHANGELOG files
          cp "README.md" "$ARCHIVE_DIR"
          # base compressed package
          pushd "${PKG_STAGING}/" >/dev/null
          case ${{ matrix.job.GOOS }} in
            windows) 7z -y a "${PKG_NAME}" "${PKG_BASENAME}"/* | tail -2 ;;
            *) tar czf "${PKG_NAME}" "${PKG_BASENAME}"/* ;;
          esac;
          popd >/dev/null
          # Let subsequent steps know where to find the compressed package
          echo ::set-output name=PKG_PATH::"${PKG_STAGING}/${PKG_NAME}"

      - name: Extract release notes
        if: steps.is-release.outputs.IS_RELEASE
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          RELEASE_NOTES=$(awk -v version="$VERSION" '/## \[/{flag=0} /## \['$version'\]/{flag=1} flag' CHANGELOG.md)
          echo "::set-output name=body::${RELEASE_NOTES}"

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v1
        if: steps.is-release.outputs.IS_RELEASE
        with:
          body: ${{ steps.release_notes.outputs.body }}
          files: |
            ${{ steps.package.outputs.PKG_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}